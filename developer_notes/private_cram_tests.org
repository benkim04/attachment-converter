* The need for private tests

Many of our cram tests need to be run on actual test emails, taken
from the wild.  Those cram tests cannot exist in this repository,
which is viewable by the entire world, because most emails contain
sensitive information in both the headers and the body, such as IP
addresses, email addresses, phone numbers, and people's full names.

* Private =git= repos

To get around this problem, our stalwart sysadmins at the DLDC have
created private =git= repositories, where the Attachment Converter
development team can create and host cram tests that contain sensitive
information.

** Authorization

Authorization to push to these repositories is pretty simple.  If
you're on the development team and you would like to be able to access
our private repositories, you just need to make a request to our
system administrators to put your public key in
=~/.ssh/authorized_keys= for the =attconv= user on our private Git
repo server, =vault.lib.uchicago.edu=.

** Creating a new repository

To create a new private Git repository on =vault.lib=, run the
following command, with =attconv= as the username and
=vault.lib.uchicago.edu= as the hostname:

#+begin_example
  $ ssh username@hostname newgit name-of-project
#+end_example

As long as you are authorized to interact with =vault.lib=, it should
work smoothly.

** Deleting an old repository

For the time being, you should plan on deleting an old repository
manually, i.e. by making a request to our sysadmins to delete the
repository directory.

** Cloning a repository

To clone one of our private repositories, run the following =git=
command, where the username is =attconv= and the hostname is
=vault.lib.uchicago.edu=:

#+begin_example
  $ git clone username@hostname:~/name-of-your-repo.git
#+end_example

* I cloned it; now what?

To run cram tests from the repository you cloned, we recommend
symbolically linking the repository directory into your Attachment
Converter project:

#+begin_example
  $ cd /path/to/attachment-converter
  $ ln -s /path/to/private-cram-repository .
#+end_example

The =dune runtest= command will recursively scan the entire project
for files and directories with the =.t= extension and treat them as
cram tests wherever it finds them.  It will also run normal unit tests
in the Attachment Converter test suite.

** How to add a cram test

To add a cram test, either open an existing =.t= file or add a new
=.t= file observing the following syntax:

- non-indented text is a comment
- indented text that starts with a =$= runs a given command

For example, you can write a file called =example.t= that looks like
this:

#+begin_example
  For this cram test, we will make sure we are on Linux.
    $ uname -s
#+end_example

Then, when you first run =dune runtest=, the output should look
approximately like this:

#+begin_src diff
  > dune runtest
  --- a/_build/.sandbox/240ab47cacf441f941f02e50d51b13ad/default/test/cram-tests/example.t
  +++ b/_build/.sandbox/240ab47cacf441f941f02e50d51b13ad/default/test/cram-tests/example.t.corrected
  @@ -1,2 +1,3 @@
   For this cram test, we will make sure we are on Linux.
     $ uname -s
  +  Linux
#+end_src

The green part is what the command output.  If that output looks
correct to you (it does to me!), then to add it to the file, you run:

#+begin_example
  $ dune promote
  Promoting _build/default/test/cram-tests/example.t.corrected to
    test/cram-tests/example.t.
#+end_example

This will take the plus-green part of the diff and add it to the
actual file, which should now look like this:

#+begin_example
  $ cat test/cram-tests/example.t
  For this cram test, we will make sure we are on Linux.
    $ uname -s
    Linux
#+end_example

The fact that =Linux= is now indented but doesn't begin with a =$=
means that =dune= will treat =Linux= as the expected output of the
command =$uname -s= when you run =dune runtest=.  Then whenever you've
updated your code such that the output changes but should be the new
expectation, you can update the file by running =dune promote= again.

* Why are there two different cram test repos?

Unfortunately, we need to maintain two separate (but mostly matching)
cram test suites: one for Linux and one for macOS.  This is because
the external utilities that are available for those two platforms
differ in the exact output they send to standard out.  (For example,
they can differ in whether they terminate paragraphs at 80 characters
or at 78 characters.)  

This means that if you are working on macOS, you should use our macOS
private cram test repository, and if you are working on Linux, you
should use our Linux private cram test repository.

Currently, the Attachment Converter project has two private cram test
repos:

- =private-cram-tests-linux.git=
- =private-cram-tests-macos.git=

* Questions?

Bug Matt.
